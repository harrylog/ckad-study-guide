pods

kubectl run hazelcast --image=hazelcast/hazelcast:5.1.7 \
--port=5701 --env="DNS_DOMAIN=cluster" --labels="app=hazelcast,env=prod"

kubectl describe pods hazelcast | grep Image

kubectl get pods hazelcast


You can use the exec command to open a shell in the container to
explore it interactively,
kubectl exec -it hazelcast -- /bin/sh

It’s also possible to execute a single command inside of a container. Say you wanted to
render the environment variables available to containers without having to be logged Just remove the interactive flag -it and provide the relevant command after the
two dashes
kubectl exec hazelcast -- env

Say you want to render all environ‐
ment variables using env to see what’s available inside of the container. The following
command achieves exactly that:
$ kubectl run busybox --image=busybox:1.36.1 --rm -it --restart=Never -- env

-i (interactive): Keeps stdin open, allowing interaction
-t (tty): Allocates a pseudo-TTY, enabling proper terminal formatting

You can inspect a Pod’s IP address
by using the -o wide command-line option for the get pod command
kubectl get pod nginx -o wide
kubectl get pod nginx -o yaml
kubectl get pod nginx -o jsonpath='{.status.podIP}'

$ kubectl run mypod --image=busybox:1.36.1 -o yaml --dry-run=client \
> pod.yaml -- /bin/sh -c "while true; do date; sleep 10; done"


You can always switch back to the default namespace or another custom namespace
using the config set-context command:
$ kubectl config set-context --current --namespace=default



jobs


The following command renders the parameters
of the Job we created :
$ kubectl get jobs counter -o yaml | grep -C 1 "completions"

$ kubectl create cronjob current-date --schedule="* * * * *" \
--image=nginx:1.25.1 -- /bin/sh -c 'echo "Current date: $(date)"'

It’s easy to match Jobs and Pods created by a CronJob. You can simply identify them
by the name prefix.

Even after a task in a Pod controlled by a CronJob completes, it will not be deleted
automatically.
By default, a CronJob retains
the last three successful Pods and the last failed Pod:
$ kubectl get cronjobs current-date -o yaml | grep successfulJobsHistoryLimit:
successfulJobsHistoryLimit: 3
$ kubectl get cronjobs current-date -o yaml | grep failedJobsHistoryLimit:
failedJobsHistoryLimit: 1









































































































































































































































